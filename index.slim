html
  head
    - outputMode = "release"
    - ARGV.each do|a|
      - if a == "debug.html"
        - outputMode = "debug.html"
    - if outputMode != "debug.html"
        script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" 
        javascript:
          (adsbygoogle = window.adsbygoogle || []).push({
            google_ad_client: "ca-pub-9967373165171874",
            enable_page_level_ads: true
          });
        javascript:
          var _gaq = _gaq || [];
          _gaq.push(['_setAccount', 'UA-31090418-4']);
          _gaq.push(['_trackPageview']);
          (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
          })();

    link href="css/style.css" rel="stylesheet" type="text/css"
    title 1964 and 1964js Home page
    meta content="1964js - N64 emulator in JavaScript" property="og:title"
    meta content="game" property="og:type"
    meta content="http://www.1964js.com" property="og:url"
    meta content="https://fbcdn-profile-a.akamaihd.net/hprofile-ak-snc4/373029_274941852620356_1206208449_n.jpg" property="og:image"
    meta content="1964js" property="og:site_name"
    meta content="1397141558" property="fb:admins"
  
  body alink="#ff0000" bgcolor="#000000" link="#ffa953" onLoad="start1964({wireframe:true})" onunload="i1964js.stopEmulatorAndCleanup()" text="#ffffff" vlink="#ffa953"

    - outputMode = "release"
    - ARGV.each do|a|
      - if a == "debug.html"
        - outputMode = "debug.html"
    - if outputMode != "debug.html"
        #fb-root
        javascript:
          window.fbAsyncInit = function() {
            FB.init({
              appId : '518018268224773', // App ID
              channelUrl : '//www.1964js.com/channel.html', // Channel File
              status : true, // check login status
              cookie : true, // enable cookies to allow the server to access the session
              xfbml : true // parse XFBML
            });
          };
            
          (function(d){
            var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
            if (d.getElementById(id)) {return;}
            js = d.createElement('script'); js.id = id; js.async = true;
            js.src = "//connect.facebook.net/en_US/all.js";
            ref.parentNode.insertBefore(js, ref);
          }(document));

          (function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=518018268224773";
            fjs.parentNode.insertBefore(js, fjs);
          }(document, 'script', 'facebook-jssdk'));

    p

    script#vertex-shader type="x-shader/x-vertex"
      | attribute vec3 aVertexPosition;
        attribute vec4 aVertexColor;
        attribute vec2 aTextureCoord;
        uniform mat4 uMVMatrix;
        uniform mat4 uPMatrix;
        
        varying highp vec4 vColor;
        varying vec2 vTextureCoord;
        
        void main(void) {
          gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
          vColor = aVertexColor;
          vTextureCoord = aTextureCoord;
        }

    script#fragment-shader type="x-shader/x-fragment"
      | precision mediump float;
        varying highp vec4 vColor;
        varying mediump vec2 vTextureCoord;
        uniform sampler2D uSampler;
        
        uniform int uWireframe;
        uniform int otherModeL, otherModeH;
        uniform int uCombineA0, uCombineB0, uCombineC0, uCombineD0;
        uniform int uCombineA0a, uCombineB0a, uCombineC0a, uCombineD0a;
        uniform int uCombineA1, uCombineB1, uCombineC1, uCombineD1;
        uniform int uCombineA1a, uCombineB1a, uCombineC1a, uCombineD1a;
        uniform vec4 uPrimColor, uFillColor, uEnvColor, uBlendColor;
        vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
        vec4 a, p, b, m;
        
        int tex0=1;
        int tex1=4;
        int env=5;
        int blend=7;
        int prim=31;
        int shade=15;
        
        //tex0=3;
        //tex1=4;
        //env=7;
        //blend=2;
        //prim=5;
        //shade=6;
        
        void main(void) {
            if (uWireframe == 1) {gl_FragColor = green; return; } 
            a = p = b = m = vec4(0.0, 0.0, 0.0, 0.0);
        
            if (otherModeL == 0) 
            {
        
              if (uCombineA0 == tex0)
                p = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineA0a == tex0)
                p.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineB0 == tex0)
                a = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineB0a == tex0)
                a.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineC0 == tex0)
                b = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 0.0);
              if (uCombineC0a == tex0)
                b.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineD0 == tex0)
                m = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineD0a == tex0)
                m.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
        
              if (uCombineA0 == tex1)
                p = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineA0a == tex1)
                p.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineB0 == tex1)
                a = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineB0a == tex1)
                a.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineC0 == tex1)
                b = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 0.0);
              if (uCombineC0a == tex1)
                b.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineD0 == tex1)
                m = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineD0a == tex1)
                m.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
        
              if (uCombineA0 == env)
                p = vec4(uEnvColor.rgb, 1.0);
              if (uCombineA0a == env)
                p.a = uEnvColor.a;
              if (uCombineB0 == env)
                a = vec4(uEnvColor.rgb, 1.0);
              if (uCombineB0a == env)
                a.a = uEnvColor.a;
              if (uCombineC0 == env)
                b = vec4(uEnvColor.rgb, 1.0);
              if (uCombineC0a == env)
                b.a = uEnvColor.a;
              if (uCombineD0 == env)
                m = vec4(uEnvColor.rgb, 1.0);
              if (uCombineD0a == env)
                m.a = uEnvColor.a;
        
              if (uCombineA0 == blend)
                p = vec4(uBlendColor.rgb, 1.0);
            //  if (uCombineA0a == blend)
            //    p.a = uBlendColor.a;
              if (uCombineB0 == blend)
                a = vec4(uBlendColor.rgb, 1.0);
            //  if (uCombineB0a == blend)
            //    a.a = uBlendColor.a;
              if (uCombineC0 == blend)
                b = vec4(uBlendColor.rgb, 1.0);
            //  if (uCombineC0a == blend)
            //    b.a = uBlendColor.a;
              if (uCombineD0 == blend)
                m = vec4(uBlendColor.rgb, 1.0);
            //  if (uCombineD0a == blend)
            //    m.a = uBlendColor.a;
        
              if (uCombineA0 == shade)
                p = vec4(vColor.rgb, 1.0);
              if (uCombineA0a == shade)
                p.a = vColor.a;
              if (uCombineB0 == shade)
                a = vec4(vColor.rgb, 1.0);
              if (uCombineB0a == shade)
                a.a = vColor.a;
              if (uCombineC0 == shade)
                b = vec4(vColor.rgb, 1.0);
              if (uCombineC0a == shade)
                b.a = vColor.a;
              if (uCombineD0 == shade)
                m = vec4(vColor.rgb, 1.0);
              if (uCombineD0a == shade)
                m.a = vColor.a;
        
              if (uCombineA0 == prim)
                p = vec4(uPrimColor.rgb, 1.0);
              if (uCombineA0a == prim)
                p.a = uPrimColor.a;
              if (uCombineB0 == prim)
                a = vec4(uPrimColor.rgb, 1.0);
              if (uCombineB0a == prim)
                a.a = uPrimColor.a;
              if (uCombineC0 == prim)
                b = vec4(uPrimColor.rgb, 1.0);
              if (uCombineC0a == prim)
                b.a = uPrimColor.a;
              if (uCombineD0 == prim)
                m = vec4(uPrimColor.rgb, 1.0);
              if (uCombineD0a == prim)
                m.a = uPrimColor.a;
              
              gl_FragColor = (a*p + b*m)/(a+b);
            }
        
            if (otherModeH == 0) 
            {
              if (uCombineA1 == tex0)
                p = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineA1a == tex0)
                p.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineB1 == tex0)
                a = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineB1a == tex0)
                a.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineC1 == tex0)
                b = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 0.0);
              if (uCombineC1a == tex0)
                b.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineD1 == tex0)
                m = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineD1a == tex0)
                m.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
        
              if (uCombineA1 == tex1)
                p = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineA1a == tex1)
                p.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineB1 == tex1)
                a = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineB1a == tex1)
                a.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineC1 == tex1)
                b = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 0.0);
              if (uCombineC1a == tex1)
                b.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
              if (uCombineD1 == tex1)
                m = vec4(vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).rgb, 1.0);
              if (uCombineD1a == tex1)
                m.a = vec4(texture2D(uSampler, vec2(vTextureCoord.st) )).a;
        
              if (uCombineA1 == env)
                p = vec4(uEnvColor.rgb, 1.0);
              if (uCombineA1a == env)
                p.a = uEnvColor.a;
              if (uCombineB1 == env)
                a = vec4(uEnvColor.rgb, 1.0);
              if (uCombineB1a == env)
                a.a = uEnvColor.a;
              if (uCombineC1 == env)
                b = vec4(uEnvColor.rgb, 1.0);
              if (uCombineC1a == env)
                b.a = uEnvColor.a;
              if (uCombineD1 == env)
                m = vec4(uEnvColor.rgb, 1.0);
              if (uCombineD1a == env)
                m.a = uEnvColor.a;
        
              if (uCombineA1 == blend)
                p = vec4(uBlendColor.rgb, 1.0);
           //   if (uCombineA1a == blend)
           //     p.a = uBlendColor.a;
              if (uCombineB1 == blend)
                a = vec4(uBlendColor.rgb, 1.0);
           //   if (uCombineB1a == blend)
           //     a.a = uBlendColor.a;
              if (uCombineC1 == blend)
                b = vec4(uBlendColor.rgb, 1.0);
           //   if (uCombineC1a == blend)
           //     b.a = uBlendColor.a;
              if (uCombineD1 == blend)
                m = vec4(uBlendColor.rgb, 1.0);
           //   if (uCombineD1a == blend)
           //     m.a = uBlendColor.a;
        
              if (uCombineA1 == shade)
                p = vec4(vColor.rgb, 1.0);
              if (uCombineA1a == shade)
                p.a = vColor.a;
              if (uCombineB1 == shade)
                a = vec4(vColor.rgb, 1.0);
              if (uCombineB1a == shade)
                a.a = vColor.a;
              if (uCombineC1 == shade)
                b = vec4(vColor.rgb, 1.0);
              if (uCombineC1a == shade)
                b.a = vColor.a;
              if (uCombineD1 == shade)
                m = vec4(vColor.rgb, 1.0);
              if (uCombineD1a == shade)
                m.a = vColor.a;
              if (uCombineA1 == prim)
                p = vec4(uPrimColor.rgb, 1.0);
              if (uCombineA1a == prim)
                p.a = uPrimColor.a;
              if (uCombineB1 == prim)
                a = vec4(uPrimColor.rgb, 1.0);
              if (uCombineB1a == prim)
                a.a = uPrimColor.a;
              if (uCombineC1 == prim)
                b = vec4(uPrimColor.rgb, 1.0);
              if (uCombineC1a == prim)
                b.a = uPrimColor.a;
              if (uCombineD1 == prim)
                m = vec4(uPrimColor.rgb, 1.0);
              if (uCombineD1a == prim)
                m.a = uPrimColor.a;
              gl_FragColor *= (a*p + b*m)/(a+b);
            }
        }

    div style="position: absolute; left: -600 px; top: -600 px"

    canvas#Canvas height="240" width="320"
    canvas#Canvas3D height="1024" width="1024"
  
    #user_panel
      .header
        a href="http://1964emu.emulation64.com" [Get 1964 for Windows]
        |&nbsp;
        a href="http://1964js.com/blog/index.html" [Blog]
        |&nbsp;
        a href="http://github.com/schibo/1964js" [Code]
        |&nbsp;
        a href="http://hulkholden.github.com/n64js/" [Try n64js too!]


        h1
          | 1964js
          div style="font-size: 10px;"
            - version1964 = ENV['version1964']
            | v#{version1964}
          select onChange="if (this.value !== 'Demos') window.open(this.value, '_self');" style="vertical-align: middle;"
            option value="Demos" Demos
            option value="?rom=roms/unofficial/rotate.zip" Rotate
            option value="?rom=roms/unofficial/chrome.zip" Chrome
            option value="?rom=roms/unofficial/dextrose.zip" Dextrose
            option value="?rom=roms/unofficial/n64stars.zip" N64 Stars
            option value="?rom=roms/unofficial/liner.zip" Liner (z to start)
            option value="?rom=roms/unofficial/hardcode.zip" Hard Coded
            option value="?rom=roms/unofficial/sp_crap.zip" Absolute Crap
            option value="?rom=roms/unofficial/DynamixReadme.zip" Dynamix

        input#wireframe type="checkbox" wireframe
        |&nbsp;&nbsp;
        input#speedlimit type="checkbox" checked="true" speed limit 


      .dropShadow
        .story
          br/
          input#files name="file" type="file" 
            | *.v64; *.n64; *.z64
          br/
          br/

      .footer
        .fb-like data-colorscheme="dark" data-send="false" data-show-faces="false" data-width="300"

    - outputMode = "release"
    - ARGV.each do|a|
      - if a == "debug.html"
        - outputMode = "debug.html"
    - if outputMode != "debug.html"
        script src='lib/1964js-#{version1964}.min.js'
    - else
        script src='obj/constants.js'
        script src='lib/bitjs/io.js'
        script src='lib/bitjs/archive.js'
        script src='lib/BigInt.js'
        script src='lib/closure/goog/base.js'
        script src='obj/1964.js'
        script src='obj/helpers.js'
        script src='obj/opcodeMap.js'
        script src='obj/boot.js'
        script src='lib/closure/goog/math/long.js'
        script src='obj/pif.js'
        script src='obj/keyboard.js'
        script src='obj/memory.js'
        script src='obj/gen.js'
        script src='obj/audio.js'
        script src='obj/dma.js'
        script src='obj/interrupts.js'
        script src='lib/glMatrix-0.9.5.min.js'
        script src='lib/webgl-utils.js'
        script src='obj/renderer.js'
        script src='obj/videoHLE.js'
        script src='obj/gfxHelpers.js'
        script src='obj/ui.js'
        script src='obj/webGL.js'